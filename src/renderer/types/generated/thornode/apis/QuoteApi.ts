// tslint:disable
/**
 * Thornode API
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.101.0
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpQuery } from '../runtime';
import {
    QuoteSaverDepositResponse,
    QuoteSaverWithdrawResponse,
    QuoteSwapResponse,
} from '../models';

export interface QuotesaverdepositRequest {
    height?: number;
    asset?: string;
    amount?: number;
}

export interface QuotesaverwithdrawRequest {
    height?: number;
    asset?: string;
    address?: string;
    withdrawBps?: number;
}

export interface QuoteswapRequest {
    height?: number;
    fromAsset?: string;
    toAsset?: string;
    amount?: number;
    destination?: string;
    toleranceBps?: number;
    affiliateBps?: number;
    affiliate?: string;
}

/**
 * no description
 */
export class QuoteApi extends BaseAPI {

    /**
     * Provide a quote estimate for the provided saver deposit.
     */
    quotesaverdeposit = ({ height, asset, amount }: QuotesaverdepositRequest): Observable<QuoteSaverDepositResponse> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }
        if (asset != null) { query['asset'] = asset; }
        if (amount != null) { query['amount'] = amount; }

        return this.request<QuoteSaverDepositResponse>({
            path: '/thorchain/quote/saver/deposit',
            method: 'GET',
            query,
        });
    };

    /**
     * Provide a quote estimate for the provided saver withdraw.
     */
    quotesaverwithdraw = ({ height, asset, address, withdrawBps }: QuotesaverwithdrawRequest): Observable<QuoteSaverWithdrawResponse> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }
        if (asset != null) { query['asset'] = asset; }
        if (address != null) { query['address'] = address; }
        if (withdrawBps != null) { query['withdraw_bps'] = withdrawBps; }

        return this.request<QuoteSaverWithdrawResponse>({
            path: '/thorchain/quote/saver/withdraw',
            method: 'GET',
            query,
        });
    };

    /**
     * Provide a quote estimate for the provided swap.
     */
    quoteswap = ({ height, fromAsset, toAsset, amount, destination, toleranceBps, affiliateBps, affiliate }: QuoteswapRequest): Observable<QuoteSwapResponse> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }
        if (fromAsset != null) { query['from_asset'] = fromAsset; }
        if (toAsset != null) { query['to_asset'] = toAsset; }
        if (amount != null) { query['amount'] = amount; }
        if (destination != null) { query['destination'] = destination; }
        if (toleranceBps != null) { query['tolerance_bps'] = toleranceBps; }
        if (affiliateBps != null) { query['affiliate_bps'] = affiliateBps; }
        if (affiliate != null) { query['affiliate'] = affiliate; }

        return this.request<QuoteSwapResponse>({
            path: '/thorchain/quote/swap',
            method: 'GET',
            query,
        });
    };

}
