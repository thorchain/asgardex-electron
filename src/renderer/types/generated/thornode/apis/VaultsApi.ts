// tslint:disable
/**
 * Thornode API
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.97.2
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    Vault,
    VaultPubkeysResponse,
} from '../models';

export interface AsgardRequest {
    height?: number;
}

export interface VaultRequest {
    pubkey: string;
    height?: number;
}

export interface VaultPubkeysRequest {
    height?: number;
}

export interface YggdrasilRequest {
    height?: number;
}

/**
 * no description
 */
export class VaultsApi extends BaseAPI {

    /**
     * Returns current asgard vaults.
     */
    asgard = ({ height }: AsgardRequest): Observable<Array<Vault>> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }

        return this.request<Array<Vault>>({
            path: '/thorchain/vaults/asgard',
            method: 'GET',
            query,
        });
    };

    /**
     * Returns the vault for the provided pubkey.
     */
    vault = ({ pubkey, height }: VaultRequest): Observable<Vault> => {
        throwIfNullOrUndefined(pubkey, 'vault');

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }

        return this.request<Vault>({
            path: '/thorchain/vaults/{pubkey}'.replace('{pubkey}', encodeURI(pubkey)),
            method: 'GET',
            query,
        });
    };

    /**
     * Returns all pubkeys for current vaults.
     */
    vaultPubkeys = ({ height }: VaultPubkeysRequest): Observable<VaultPubkeysResponse> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }

        return this.request<VaultPubkeysResponse>({
            path: '/thorchain/vaults/pubkeys',
            method: 'GET',
            query,
        });
    };

    /**
     * Returns current yggdrasil vaults.
     */
    yggdrasil = ({ height }: YggdrasilRequest): Observable<Array<Vault>> => {

        const query: HttpQuery = {};

        if (height != null) { query['height'] = height; }

        return this.request<Array<Vault>>({
            path: '/thorchain/vaults/yggdrasil',
            method: 'GET',
            query,
        });
    };

}
