// tslint:disable
/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 0.7.1
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @export
 * @interface PoolAggChanges
 */
export interface PoolAggChanges {
    /**
     * Total changes in asset depth at this time bucket
     * @type {string}
     * @memberof PoolAggChanges
     */
    assetChanges?: string;
    /**
     * Depth of asset at the end of current time bucket
     * @type {string}
     * @memberof PoolAggChanges
     */
    assetDepth?: string;
    /**
     * Total asset staked
     * @type {string}
     * @memberof PoolAggChanges
     */
    assetStaked?: string;
    /**
     * Total asset withdrawn
     * @type {string}
     * @memberof PoolAggChanges
     */
    assetWithdrawn?: string;
    /**
     * Count of buy swaps
     * @type {number}
     * @memberof PoolAggChanges
     */
    buyCount?: number;
    /**
     * Sum of \"rune_amount\" of buy swap events
     * @type {string}
     * @memberof PoolAggChanges
     */
    buyVolume?: string;
    /**
     * Total amount of rune, paid by the network to neutralize \"gasUsed\" changes
     * @type {string}
     * @memberof PoolAggChanges
     */
    gasReplenished?: string;
    /**
     * Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)
     * @type {string}
     * @memberof PoolAggChanges
     */
    gasUsed?: string;
    /**
     * buyVolume + sellVolume
     * @type {string}
     * @memberof PoolAggChanges
     */
    poolVolume?: string;
    /**
     * Asset price in rune at the end of current time bucket
     * @type {string}
     * @memberof PoolAggChanges
     */
    price?: string;
    /**
     * Sum of \"rewards\" events in rune
     * @type {string}
     * @memberof PoolAggChanges
     */
    reward?: string;
    /**
     * Total changes in rune depth at this time bucket
     * @type {string}
     * @memberof PoolAggChanges
     */
    runeChanges?: string;
    /**
     * Depth of rune at the end of current time bucket
     * @type {string}
     * @memberof PoolAggChanges
     */
    runeDepth?: string;
    /**
     * Total rune staked
     * @type {string}
     * @memberof PoolAggChanges
     */
    runeStaked?: string;
    /**
     * Total rune withdrawn
     * @type {string}
     * @memberof PoolAggChanges
     */
    runeWithdrawn?: string;
    /**
     * Count of sell swaps
     * @type {number}
     * @memberof PoolAggChanges
     */
    sellCount?: number;
    /**
     * Sum of \"rune_amount\" of sell swap events
     * @type {string}
     * @memberof PoolAggChanges
     */
    sellVolume?: string;
    /**
     * Count of stake events
     * @type {number}
     * @memberof PoolAggChanges
     */
    stakeCount?: number;
    /**
     * Determining end of current time bucket in unix timestamp
     * @type {number}
     * @memberof PoolAggChanges
     */
    time?: number;
    /**
     * Total changes in pool units (stakes/withdraws)
     * @type {string}
     * @memberof PoolAggChanges
     */
    unitsChanges?: string;
    /**
     * Count of withdraw events
     * @type {number}
     * @memberof PoolAggChanges
     */
    withdrawCount?: number;
}
