// tslint:disable
/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 2.12.2
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @export
 * @interface PoolDetail
 */
export interface PoolDetail {
    /**
     * Float, Also called APR. Annual return estimated linearly (not compounded) from a period of typically the last 30 or 100 days (configurable by the period parameter, default is 30). E.g. 0.1 means 10% yearly return. Due to Impermanent Loss and Synths this might be negative, but given Impermanent Loss Protection for 100+ day members, frontends might show MAX(APR, 0). 
     * @type {string}
     * @memberof PoolDetail
     */
    annualPercentageRate: string;
    /**
     * @type {string}
     * @memberof PoolDetail
     */
    asset: string;
    /**
     * Int64(e8), the amount of Asset in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    assetDepth: string;
    /**
     * Float, price of asset in rune. I.e. rune amount / asset amount.
     * @type {string}
     * @memberof PoolDetail
     */
    assetPrice: string;
    /**
     * Float, the price of asset in USD (based on the deepest USD pool).
     * @type {string}
     * @memberof PoolDetail
     */
    assetPriceUSD: string;
    /**
     * Int64, Liquidity Units in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    liquidityUnits: string;
    /**
     * Int64, The native decimal number of the pool asset. (If the value is \"-1\", it means midgard doesn\'t know the pool native decimal)
     * @type {string}
     * @memberof PoolDetail
     */
    nativeDecimal: string;
    /**
     * Float, MAX(AnnualPercentageRate, 0) 
     * @type {string}
     * @memberof PoolDetail
     */
    poolAPY: string;
    /**
     * Int64(e8), the amount of Rune in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    runeDepth: string;
    /**
     * Float, Annual Return estimated linearly (not compounded) for savers from a period of typically the last 30 or 100 days (configurable by the period parameter, default is 30). E.g. 0.1 means 10% yearly return. If the savers period has not yet been reached, It will show zero instead. 
     * @type {string}
     * @memberof PoolDetail
     */
    saversAPR: string;
    /**
     * Int64, Total synth locked in saver vault.
     * @type {string}
     * @memberof PoolDetail
     */
    saversDepth: string;
    /**
     * Int64, Units tracking savers vault ownership.
     * @type {string}
     * @memberof PoolDetail
     */
    saversUnits: string;
    /**
     * The state of the pool, e.g. Available, Staged.
     * @type {string}
     * @memberof PoolDetail
     */
    status: string;
    /**
     * Int64, Synth supply in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    synthSupply: string;
    /**
     * Int64, Synth Units in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    synthUnits: string;
    /**
     * Int64, Total Units (synthUnits + liquidityUnits) in the pool.
     * @type {string}
     * @memberof PoolDetail
     */
    units: string;
    /**
     * Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune. It includes synth mint or burn. 
     * @type {string}
     * @memberof PoolDetail
     */
    volume24h: string;
}
