// tslint:disable
/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 2.0.0-alpha.2
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @export
 * @interface PoolLegacyDetail
 */
export interface PoolLegacyDetail {
    /**
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    asset: string;
    /**
     * Int64, the amount of Asset in the pool
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    assetDepth: string;
    /**
     * Float, price of asset in rune. I.e. rune amount / asset amount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    assetPrice: string;
    /**
     * Int64, same as history/swaps:toAssetCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    buyAssetCount: string;
    /**
     * Float, same as history/swaps:toRuneVolume/toRuneCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    buyTxAverage: string;
    /**
     * Int64, same as history/swaps:toAssetVolume
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    buyVolume: string;
    /**
     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolAPY: string;
    /**
     * Int64, same as assetDepth + runeDepth
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolDepth: string;
    /**
     * Float, same as history/swaps:totalFees/totalCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolFeeAverage: string;
    /**
     * Int64, same as history/swaps:totalFees
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolFeesTotal: string;
    /**
     * Float, same as history/swaps:averageSlip
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolSlipAverage: string;
    /**
     * Float, same as history/swaps:totalVolume/totalCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolTxAverage: string;
    /**
     * Int64, same as buyVolume + sellVolume
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    poolVolume: string;
    /**
     * Int64, the amount of Rune in the pool
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    runeDepth: string;
    /**
     * Int64, same as history/swaps:toRuneCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    sellAssetCount: string;
    /**
     * Float, same as history/swaps:toAssetVolume/toAssetCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    sellTxAverage: string;
    /**
     * Int64, same as history/swaps:toRuneVolume
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    sellVolume: string;
    /**
     * The state of the pool, e.g. Available, Staged
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    status: string;
    /**
     * Int64, same as history/swaps:totalCount
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    swappingTxCount: string;
    /**
     * Int64, Liquidity Units in the pool
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    units: string;
    /**
     * Int64, the total volume of swaps in the last 24h to and from Rune denoted in Rune
     * @type {string}
     * @memberof PoolLegacyDetail
     */
    volume24h: string;
}
